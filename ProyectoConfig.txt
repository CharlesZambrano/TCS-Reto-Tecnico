CONFIGURACION PROYECTO:

Docker-Compose:

	version: "3"
	services:
	  postgres_clientes:
	    image: postgres:14
	    environment:
	      POSTGRES_DB: clientes_db
	      POSTGRES_USER: admin
	      POSTGRES_PASSWORD: admin
	    ports:
	      - "5433:5432"
	    container_name: postgres_clientes
	    volumes:
	      - ./db-init/clientes_personas.sql:/docker-entrypoint-initdb.d/clientes_personas.sql
	    networks:
	      - microservices-network
	    restart: always

	  postgres_cuentas:
	    image: postgres:14
	    environment:
	      POSTGRES_DB: cuentas_db
	      POSTGRES_USER: admin
	      POSTGRES_PASSWORD: admin
	    ports:
	      - "5434:5432"
	    container_name: postgres_cuentas
	    volumes:
	      - ./db-init/cuentas_movimientos.sql:/docker-entrypoint-initdb.d/cuentas_movimientos.sql
	    networks:
	      - microservices-network
	    restart: always

	  rabbitmq:
	    image: rabbitmq:management
	    ports:
	      - "5672:5672"
	      - "15672:15672"
	    container_name: rabbitmq
	    networks:
	      - microservices-network
	    restart: always

	  clientes_personas:
	    build: ./clientes_personas
	    container_name: clientes-personas
	    ports:
	      - "8080:8080"
	    depends_on:
	      - postgres_clientes
	      - rabbitmq
	    environment:
	      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres_clientes:5432/clientes_db
	      SPRING_DATASOURCE_USERNAME: admin
	      SPRING_DATASOURCE_PASSWORD: admin
	      SPRING_RABBITMQ_HOST: rabbitmq
	    networks:
	      - microservices-network

	  cuentas_movimientos:
	    build: ./cuentas_movimientos
	    container_name: cuentas-movimientos
	    ports:
	      - "8081:8081"
	    depends_on:
	      - postgres_cuentas
	      - rabbitmq
	    environment:
	      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres_cuentas:5432/cuentas_db
	      SPRING_DATASOURCE_USERNAME: admin
	      SPRING_DATASOURCE_PASSWORD: admin
	      SPRING_RABBITMQ_HOST: rabbitmq
	    networks:
	      - microservices-network

	networks:
	  microservices-network:
	    driver: bridge

db-init:

	clientes_personas.sql:

		CREATE TABLE IF NOT EXISTS persona (
		    persona_id SERIAL PRIMARY KEY,
		    nombre VARCHAR(100) NOT NULL,
		    genero VARCHAR(3) CHECK (genero IN ('MAS', 'FEM', 'OTR')),
		    edad INT,
		    identificacion VARCHAR(20) UNIQUE NOT NULL,
		    direccion VARCHAR(255),
		    telefono VARCHAR(15)
		);

		COMMENT ON TABLE persona IS 'Tabla que almacena los datos de una persona, incluyendo su género, identificación y datos de contacto';

		COMMENT ON COLUMN persona.persona_id IS 'Clave primaria única para cada persona';
		COMMENT ON COLUMN persona.nombre IS 'Nombre completo de la persona';
		COMMENT ON COLUMN persona.genero IS 'Género de la persona: MAS = Masculino, FEM = Femenino, OTR = Otro';
		COMMENT ON COLUMN persona.edad IS 'Edad de la persona';
		COMMENT ON COLUMN persona.identificacion IS 'Identificación única de la persona';
		COMMENT ON COLUMN persona.direccion IS 'Dirección de la residencia de la persona';
		COMMENT ON COLUMN persona.telefono IS 'Número de teléfono de contacto';

		CREATE TABLE IF NOT EXISTS cliente (
		    cliente_id SERIAL PRIMARY KEY,
		    persona_id INT REFERENCES persona(persona_id),
		    contraseña VARCHAR(100) NOT NULL,
		    estado BOOLEAN NOT NULL,
		    UNIQUE (persona_id)
		);

		COMMENT ON TABLE cliente IS 'Tabla que almacena los datos de clientes vinculados a personas registradas en la tabla persona';

		COMMENT ON COLUMN cliente.cliente_id IS 'Clave primaria única para cada cliente';
		COMMENT ON COLUMN cliente.persona_id IS 'Referencia a la clave primaria de la tabla persona';
		COMMENT ON COLUMN cliente.contraseña IS 'Contraseña de acceso del cliente';
		COMMENT ON COLUMN cliente.estado IS 'Estado del cliente: activo o inactivo';

		CREATE INDEX IF NOT EXISTS idx_persona_identificacion ON persona (identificacion);
		CREATE INDEX IF NOT EXISTS idx_cliente_persona_id ON cliente (persona_id);

	cuentas_movimientos.sql:

		CREATE TABLE IF NOT EXISTS cuenta (
		    cuenta_id SERIAL PRIMARY KEY,
		    unique_id VARCHAR(16) NOT NULL,
		    numero_cuenta VARCHAR(20) UNIQUE NOT NULL,
		    tipo VARCHAR(3) NOT NULL CHECK (tipo IN ('COR', 'AHO')),
		    saldo_inicial DECIMAL(17, 2) NOT NULL,
		    estado BOOLEAN NOT NULL,
		    cliente_id INT NOT NULL,
		    CONSTRAINT uq_unique_id UNIQUE (unique_id),
		    CONSTRAINT chk_saldo_negativo CHECK ((tipo = 'COR') OR (saldo_inicial >= 0))
		);

		COMMENT ON TABLE cuenta IS 'Tabla que almacena información sobre las cuentas bancarias de los clientes, incluyendo tipo de cuenta y saldo inicial';
		COMMENT ON COLUMN cuenta.cuenta_id IS 'Clave primaria única e incremental para la cuenta';
		COMMENT ON COLUMN cuenta.unique_id IS 'Identificador único generado externamente para la cuenta';
		COMMENT ON COLUMN cuenta.numero_cuenta IS 'Número de cuenta bancario único';
		COMMENT ON COLUMN cuenta.tipo IS 'Tipo de cuenta: COR = Corriente, AHO = Ahorro';
		COMMENT ON COLUMN cuenta.saldo_inicial IS 'Saldo inicial de la cuenta. Puede ser negativo solo en cuentas corrientes.';
		COMMENT ON COLUMN cuenta.estado IS 'Estado de la cuenta: activa o inactiva';
		COMMENT ON COLUMN cuenta.cliente_id IS 'Relación con el cliente asociado a esta cuenta';

		CREATE TABLE IF NOT EXISTS movimiento (
		    movimiento_id SERIAL PRIMARY KEY,
		    unique_id VARCHAR(16) NOT NULL,
		    fecha TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
		    tipo VARCHAR(3) NOT NULL CHECK (tipo IN ('RET', 'DEP')),
		    valor DECIMAL(17, 2) NOT NULL,
		    saldo_inicial DECIMAL(17, 2) NOT NULL,
		    saldo_disponible DECIMAL(17, 2) NOT NULL,
		    numero_cuenta VARCHAR(20) NOT NULL,
		    CONSTRAINT fk_cuenta_numero FOREIGN KEY (numero_cuenta) REFERENCES cuenta(numero_cuenta),
		    CONSTRAINT uq_mov_unique_id UNIQUE (unique_id)
		);

		COMMENT ON TABLE movimiento IS 'Tabla que almacena los movimientos bancarios realizados en las cuentas, incluyendo retiros y depósitos';
		COMMENT ON COLUMN movimiento.movimiento_id IS 'Clave primaria única e incremental para el movimiento';
		COMMENT ON COLUMN movimiento.unique_id IS 'Identificador único generado externamente para el movimiento';
		COMMENT ON COLUMN movimiento.fecha IS 'Fecha en la que se realizó el movimiento';
		COMMENT ON COLUMN movimiento.tipo IS 'Tipo de movimiento: RET = Retiro, DEP = Depósito';
		COMMENT ON COLUMN movimiento.valor IS 'Valor del movimiento realizado';
		COMMENT ON COLUMN movimiento.saldo_inicial IS 'Saldo en la cuenta antes de realizar el movimiento';
		COMMENT ON COLUMN movimiento.saldo_disponible IS 'Saldo en la cuenta después de realizar el movimiento.';
		COMMENT ON COLUMN movimiento.numero_cuenta IS 'Número de cuenta en el cual se realizó el movimiento';

		CREATE INDEX IF NOT EXISTS idx_cuenta_cliente_id ON cuenta (cliente_id);
		CREATE INDEX IF NOT EXISTS idx_movimiento_fecha ON movimiento (fecha);
		CREATE INDEX IF NOT EXISTS idx_movimiento_cuenta ON movimiento (numero_cuenta);

Dockerfile microservice 1:

	FROM eclipse-temurin:21-jre-alpine
	COPY build/libs/clientes_personas-V1.jar /app/clientes_personas-V1.jar
	ENTRYPOINT [ "java", "-jar", "/app/clientes_personas-V1.jar" ]
	EXPOSE 8080
	RUN apk --update --no-cache add curl
	HEALTHCHECK --interval=1m --timeout=30s --start-period=5s --retries=3 \
	    CMD curl -f http://localhost:8080/actuator/health || exit 1
	LABEL version="0.1" \
	    description="Clientes-Personas microservice using Postgres\
	    including Docker containers and health check test"

Dockerfile microservice 2:

	FROM eclipse-temurin:21-jre-alpine
	COPY build/libs/cuentas_movimientos-V1.jar /app/cuentas_movimientos-V1.jar
	ENTRYPOINT [ "java", "-jar", "/app/cuentas_movimientos-V1.jar" ]
	EXPOSE 8081
	RUN apk --update --no-cache add curl
	HEALTHCHECK --interval=1m --timeout=30s --start-period=5s --retries=3 \
	    CMD curl -f http://localhost:8081/actuator/health || exit 1
	LABEL version="0.1" \
	    description="Cuentas-Movimientos microservice using Postgres\
	    including Docker containers and health check test"